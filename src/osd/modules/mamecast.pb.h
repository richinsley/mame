// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mamecast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mamecast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mamecast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mamecast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mamecast_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mamecast_2eproto;
namespace mamecast_protocol {
class FrameAllocate;
class FrameAllocateDefaultTypeInternal;
extern FrameAllocateDefaultTypeInternal _FrameAllocate_default_instance_;
class FrameFree;
class FrameFreeDefaultTypeInternal;
extern FrameFreeDefaultTypeInternal _FrameFree_default_instance_;
class FrameStateChange;
class FrameStateChangeDefaultTypeInternal;
extern FrameStateChangeDefaultTypeInternal _FrameStateChange_default_instance_;
}  // namespace mamecast_protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::mamecast_protocol::FrameAllocate* Arena::CreateMaybeMessage<::mamecast_protocol::FrameAllocate>(Arena*);
template<> ::mamecast_protocol::FrameFree* Arena::CreateMaybeMessage<::mamecast_protocol::FrameFree>(Arena*);
template<> ::mamecast_protocol::FrameStateChange* Arena::CreateMaybeMessage<::mamecast_protocol::FrameStateChange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mamecast_protocol {

enum FrameStateChange_FrameStateType : int {
  FrameStateChange_FrameStateType_FRAME_ADDED = 0,
  FrameStateChange_FrameStateType_FRAME_REMOVED = 1,
  FrameStateChange_FrameStateType_FRAME_CAN_READ = 2,
  FrameStateChange_FrameStateType_FRAME_CAN_WRITE = 3,
  FrameStateChange_FrameStateType_FrameStateChange_FrameStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FrameStateChange_FrameStateType_FrameStateChange_FrameStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FrameStateChange_FrameStateType_IsValid(int value);
constexpr FrameStateChange_FrameStateType FrameStateChange_FrameStateType_FrameStateType_MIN = FrameStateChange_FrameStateType_FRAME_ADDED;
constexpr FrameStateChange_FrameStateType FrameStateChange_FrameStateType_FrameStateType_MAX = FrameStateChange_FrameStateType_FRAME_CAN_WRITE;
constexpr int FrameStateChange_FrameStateType_FrameStateType_ARRAYSIZE = FrameStateChange_FrameStateType_FrameStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameStateChange_FrameStateType_descriptor();
template<typename T>
inline const std::string& FrameStateChange_FrameStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameStateChange_FrameStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameStateChange_FrameStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FrameStateChange_FrameStateType_descriptor(), enum_t_value);
}
inline bool FrameStateChange_FrameStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrameStateChange_FrameStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameStateChange_FrameStateType>(
    FrameStateChange_FrameStateType_descriptor(), name, value);
}
enum MsgType : int {
  FRAME_ALLOCATE = 0,
  FRAME_FREE = 1,
  FRAME_STATE_CHANGE = 2,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = FRAME_ALLOCATE;
constexpr MsgType MsgType_MAX = FRAME_STATE_CHANGE;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class FrameAllocate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mamecast_protocol.FrameAllocate) */ {
 public:
  inline FrameAllocate() : FrameAllocate(nullptr) {};
  virtual ~FrameAllocate();

  FrameAllocate(const FrameAllocate& from);
  FrameAllocate(FrameAllocate&& from) noexcept
    : FrameAllocate() {
    *this = ::std::move(from);
  }

  inline FrameAllocate& operator=(const FrameAllocate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAllocate& operator=(FrameAllocate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameAllocate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameAllocate* internal_default_instance() {
    return reinterpret_cast<const FrameAllocate*>(
               &_FrameAllocate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameAllocate& a, FrameAllocate& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAllocate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAllocate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameAllocate* New() const final {
    return CreateMaybeMessage<FrameAllocate>(nullptr);
  }

  FrameAllocate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameAllocate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameAllocate& from);
  void MergeFrom(const FrameAllocate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAllocate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mamecast_protocol.FrameAllocate";
  }
  protected:
  explicit FrameAllocate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mamecast_2eproto);
    return ::descriptor_table_mamecast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kFrameCountFieldNumber = 3,
  };
  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frame_count = 3;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_count() const;
  void _internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mamecast_protocol.FrameAllocate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mamecast_2eproto;
};
// -------------------------------------------------------------------

class FrameFree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mamecast_protocol.FrameFree) */ {
 public:
  inline FrameFree() : FrameFree(nullptr) {};
  virtual ~FrameFree();

  FrameFree(const FrameFree& from);
  FrameFree(FrameFree&& from) noexcept
    : FrameFree() {
    *this = ::std::move(from);
  }

  inline FrameFree& operator=(const FrameFree& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameFree& operator=(FrameFree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameFree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameFree* internal_default_instance() {
    return reinterpret_cast<const FrameFree*>(
               &_FrameFree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameFree& a, FrameFree& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameFree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameFree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameFree* New() const final {
    return CreateMaybeMessage<FrameFree>(nullptr);
  }

  FrameFree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameFree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameFree& from);
  void MergeFrom(const FrameFree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameFree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mamecast_protocol.FrameFree";
  }
  protected:
  explicit FrameFree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mamecast_2eproto);
    return ::descriptor_table_mamecast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 1,
  };
  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mamecast_protocol.FrameFree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mamecast_2eproto;
};
// -------------------------------------------------------------------

class FrameStateChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mamecast_protocol.FrameStateChange) */ {
 public:
  inline FrameStateChange() : FrameStateChange(nullptr) {};
  virtual ~FrameStateChange();

  FrameStateChange(const FrameStateChange& from);
  FrameStateChange(FrameStateChange&& from) noexcept
    : FrameStateChange() {
    *this = ::std::move(from);
  }

  inline FrameStateChange& operator=(const FrameStateChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameStateChange& operator=(FrameStateChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameStateChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameStateChange* internal_default_instance() {
    return reinterpret_cast<const FrameStateChange*>(
               &_FrameStateChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameStateChange& a, FrameStateChange& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameStateChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameStateChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameStateChange* New() const final {
    return CreateMaybeMessage<FrameStateChange>(nullptr);
  }

  FrameStateChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameStateChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameStateChange& from);
  void MergeFrom(const FrameStateChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameStateChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mamecast_protocol.FrameStateChange";
  }
  protected:
  explicit FrameStateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mamecast_2eproto);
    return ::descriptor_table_mamecast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FrameStateChange_FrameStateType FrameStateType;
  static constexpr FrameStateType FRAME_ADDED =
    FrameStateChange_FrameStateType_FRAME_ADDED;
  static constexpr FrameStateType FRAME_REMOVED =
    FrameStateChange_FrameStateType_FRAME_REMOVED;
  static constexpr FrameStateType FRAME_CAN_READ =
    FrameStateChange_FrameStateType_FRAME_CAN_READ;
  static constexpr FrameStateType FRAME_CAN_WRITE =
    FrameStateChange_FrameStateType_FRAME_CAN_WRITE;
  static inline bool FrameStateType_IsValid(int value) {
    return FrameStateChange_FrameStateType_IsValid(value);
  }
  static constexpr FrameStateType FrameStateType_MIN =
    FrameStateChange_FrameStateType_FrameStateType_MIN;
  static constexpr FrameStateType FrameStateType_MAX =
    FrameStateChange_FrameStateType_FrameStateType_MAX;
  static constexpr int FrameStateType_ARRAYSIZE =
    FrameStateChange_FrameStateType_FrameStateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameStateType_descriptor() {
    return FrameStateChange_FrameStateType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameStateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameStateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameStateType_Name.");
    return FrameStateChange_FrameStateType_Name(enum_t_value);
  }
  static inline bool FrameStateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameStateType* value) {
    return FrameStateChange_FrameStateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShmemPathFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string shmem_path = 5;
  void clear_shmem_path();
  const std::string& shmem_path() const;
  void set_shmem_path(const std::string& value);
  void set_shmem_path(std::string&& value);
  void set_shmem_path(const char* value);
  void set_shmem_path(const char* value, size_t size);
  std::string* mutable_shmem_path();
  std::string* release_shmem_path();
  void set_allocated_shmem_path(std::string* shmem_path);
  private:
  const std::string& _internal_shmem_path() const;
  void _internal_set_shmem_path(const std::string& value);
  std::string* _internal_mutable_shmem_path();
  public:

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .mamecast_protocol.FrameStateChange.FrameStateType type = 4;
  void clear_type();
  ::mamecast_protocol::FrameStateChange_FrameStateType type() const;
  void set_type(::mamecast_protocol::FrameStateChange_FrameStateType value);
  private:
  ::mamecast_protocol::FrameStateChange_FrameStateType _internal_type() const;
  void _internal_set_type(::mamecast_protocol::FrameStateChange_FrameStateType value);
  public:

  // @@protoc_insertion_point(class_scope:mamecast_protocol.FrameStateChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shmem_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mamecast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameAllocate

// int32 width = 1;
inline void FrameAllocate::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAllocate::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAllocate::width() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameAllocate.width)
  return _internal_width();
}
inline void FrameAllocate::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void FrameAllocate::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameAllocate.width)
}

// int32 height = 2;
inline void FrameAllocate::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAllocate::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAllocate::height() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameAllocate.height)
  return _internal_height();
}
inline void FrameAllocate::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void FrameAllocate::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameAllocate.height)
}

// int32 frame_count = 3;
inline void FrameAllocate::clear_frame_count() {
  frame_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAllocate::_internal_frame_count() const {
  return frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAllocate::frame_count() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameAllocate.frame_count)
  return _internal_frame_count();
}
inline void FrameAllocate::_internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_count_ = value;
}
inline void FrameAllocate::set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameAllocate.frame_count)
}

// -------------------------------------------------------------------

// FrameFree

// int32 frame_id = 1;
inline void FrameFree::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameFree::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameFree::frame_id() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameFree.frame_id)
  return _internal_frame_id();
}
inline void FrameFree::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void FrameFree::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameFree.frame_id)
}

// -------------------------------------------------------------------

// FrameStateChange

// int32 frame_id = 1;
inline void FrameStateChange::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameStateChange::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameStateChange::frame_id() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameStateChange.frame_id)
  return _internal_frame_id();
}
inline void FrameStateChange::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void FrameStateChange::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameStateChange.frame_id)
}

// int32 width = 2;
inline void FrameStateChange::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameStateChange::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameStateChange::width() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameStateChange.width)
  return _internal_width();
}
inline void FrameStateChange::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void FrameStateChange::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameStateChange.width)
}

// int32 height = 3;
inline void FrameStateChange::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameStateChange::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameStateChange::height() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameStateChange.height)
  return _internal_height();
}
inline void FrameStateChange::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void FrameStateChange::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameStateChange.height)
}

// .mamecast_protocol.FrameStateChange.FrameStateType type = 4;
inline void FrameStateChange::clear_type() {
  type_ = 0;
}
inline ::mamecast_protocol::FrameStateChange_FrameStateType FrameStateChange::_internal_type() const {
  return static_cast< ::mamecast_protocol::FrameStateChange_FrameStateType >(type_);
}
inline ::mamecast_protocol::FrameStateChange_FrameStateType FrameStateChange::type() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameStateChange.type)
  return _internal_type();
}
inline void FrameStateChange::_internal_set_type(::mamecast_protocol::FrameStateChange_FrameStateType value) {
  
  type_ = value;
}
inline void FrameStateChange::set_type(::mamecast_protocol::FrameStateChange_FrameStateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameStateChange.type)
}

// string shmem_path = 5;
inline void FrameStateChange::clear_shmem_path() {
  shmem_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FrameStateChange::shmem_path() const {
  // @@protoc_insertion_point(field_get:mamecast_protocol.FrameStateChange.shmem_path)
  return _internal_shmem_path();
}
inline void FrameStateChange::set_shmem_path(const std::string& value) {
  _internal_set_shmem_path(value);
  // @@protoc_insertion_point(field_set:mamecast_protocol.FrameStateChange.shmem_path)
}
inline std::string* FrameStateChange::mutable_shmem_path() {
  // @@protoc_insertion_point(field_mutable:mamecast_protocol.FrameStateChange.shmem_path)
  return _internal_mutable_shmem_path();
}
inline const std::string& FrameStateChange::_internal_shmem_path() const {
  return shmem_path_.Get();
}
inline void FrameStateChange::_internal_set_shmem_path(const std::string& value) {
  
  shmem_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameStateChange::set_shmem_path(std::string&& value) {
  
  shmem_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mamecast_protocol.FrameStateChange.shmem_path)
}
inline void FrameStateChange::set_shmem_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shmem_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mamecast_protocol.FrameStateChange.shmem_path)
}
inline void FrameStateChange::set_shmem_path(const char* value,
    size_t size) {
  
  shmem_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mamecast_protocol.FrameStateChange.shmem_path)
}
inline std::string* FrameStateChange::_internal_mutable_shmem_path() {
  
  return shmem_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameStateChange::release_shmem_path() {
  // @@protoc_insertion_point(field_release:mamecast_protocol.FrameStateChange.shmem_path)
  return shmem_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameStateChange::set_allocated_shmem_path(std::string* shmem_path) {
  if (shmem_path != nullptr) {
    
  } else {
    
  }
  shmem_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shmem_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mamecast_protocol.FrameStateChange.shmem_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mamecast_protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mamecast_protocol::FrameStateChange_FrameStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mamecast_protocol::FrameStateChange_FrameStateType>() {
  return ::mamecast_protocol::FrameStateChange_FrameStateType_descriptor();
}
template <> struct is_proto_enum< ::mamecast_protocol::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mamecast_protocol::MsgType>() {
  return ::mamecast_protocol::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mamecast_2eproto
