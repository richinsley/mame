// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mamecast.proto

#include "mamecast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mamecast_protocol {
class FrameAllocateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameAllocate> _instance;
} _FrameAllocate_default_instance_;
class FrameFreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameFree> _instance;
} _FrameFree_default_instance_;
class FrameStateChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameStateChange> _instance;
} _FrameStateChange_default_instance_;
}  // namespace mamecast_protocol
static void InitDefaultsscc_info_FrameAllocate_mamecast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mamecast_protocol::_FrameAllocate_default_instance_;
    new (ptr) ::mamecast_protocol::FrameAllocate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mamecast_protocol::FrameAllocate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameAllocate_mamecast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameAllocate_mamecast_2eproto}, {}};

static void InitDefaultsscc_info_FrameFree_mamecast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mamecast_protocol::_FrameFree_default_instance_;
    new (ptr) ::mamecast_protocol::FrameFree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mamecast_protocol::FrameFree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameFree_mamecast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameFree_mamecast_2eproto}, {}};

static void InitDefaultsscc_info_FrameStateChange_mamecast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mamecast_protocol::_FrameStateChange_default_instance_;
    new (ptr) ::mamecast_protocol::FrameStateChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mamecast_protocol::FrameStateChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameStateChange_mamecast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameStateChange_mamecast_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mamecast_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mamecast_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mamecast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mamecast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameAllocate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameAllocate, width_),
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameAllocate, height_),
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameAllocate, frame_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameFree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameFree, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameStateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameStateChange, frame_id_),
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameStateChange, width_),
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameStateChange, height_),
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameStateChange, type_),
  PROTOBUF_FIELD_OFFSET(::mamecast_protocol::FrameStateChange, shmem_path_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mamecast_protocol::FrameAllocate)},
  { 8, -1, sizeof(::mamecast_protocol::FrameFree)},
  { 14, -1, sizeof(::mamecast_protocol::FrameStateChange)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mamecast_protocol::_FrameAllocate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mamecast_protocol::_FrameFree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mamecast_protocol::_FrameStateChange_default_instance_),
};

const char descriptor_table_protodef_mamecast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016mamecast.proto\022\021mamecast_protocol\"C\n\rF"
  "rameAllocate\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 "
  "\001(\005\022\023\n\013frame_count\030\003 \001(\005\"\035\n\tFrameFree\022\020\n"
  "\010frame_id\030\001 \001(\005\"\370\001\n\020FrameStateChange\022\020\n\010"
  "frame_id\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030"
  "\003 \001(\005\022@\n\004type\030\004 \001(\01622.mamecast_protocol."
  "FrameStateChange.FrameStateType\022\022\n\nshmem"
  "_path\030\005 \001(\t\"]\n\016FrameStateType\022\017\n\013FRAME_A"
  "DDED\020\000\022\021\n\rFRAME_REMOVED\020\001\022\022\n\016FRAME_CAN_R"
  "EAD\020\002\022\023\n\017FRAME_CAN_WRITE\020\003*E\n\007MsgType\022\022\n"
  "\016FRAME_ALLOCATE\020\000\022\016\n\nFRAME_FREE\020\001\022\026\n\022FRA"
  "ME_STATE_CHANGE\020\002B\tZ\007/protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mamecast_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mamecast_2eproto_sccs[3] = {
  &scc_info_FrameAllocate_mamecast_2eproto.base,
  &scc_info_FrameFree_mamecast_2eproto.base,
  &scc_info_FrameStateChange_mamecast_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mamecast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mamecast_2eproto = {
  false, false, descriptor_table_protodef_mamecast_2eproto, "mamecast.proto", 476,
  &descriptor_table_mamecast_2eproto_once, descriptor_table_mamecast_2eproto_sccs, descriptor_table_mamecast_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_mamecast_2eproto::offsets,
  file_level_metadata_mamecast_2eproto, 3, file_level_enum_descriptors_mamecast_2eproto, file_level_service_descriptors_mamecast_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mamecast_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mamecast_2eproto)), true);
namespace mamecast_protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameStateChange_FrameStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mamecast_2eproto);
  return file_level_enum_descriptors_mamecast_2eproto[0];
}
bool FrameStateChange_FrameStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FrameStateChange_FrameStateType FrameStateChange::FRAME_ADDED;
constexpr FrameStateChange_FrameStateType FrameStateChange::FRAME_REMOVED;
constexpr FrameStateChange_FrameStateType FrameStateChange::FRAME_CAN_READ;
constexpr FrameStateChange_FrameStateType FrameStateChange::FRAME_CAN_WRITE;
constexpr FrameStateChange_FrameStateType FrameStateChange::FrameStateType_MIN;
constexpr FrameStateChange_FrameStateType FrameStateChange::FrameStateType_MAX;
constexpr int FrameStateChange::FrameStateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mamecast_2eproto);
  return file_level_enum_descriptors_mamecast_2eproto[1];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FrameAllocate::InitAsDefaultInstance() {
}
class FrameAllocate::_Internal {
 public:
};

FrameAllocate::FrameAllocate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mamecast_protocol.FrameAllocate)
}
FrameAllocate::FrameAllocate(const FrameAllocate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_count_) -
    reinterpret_cast<char*>(&width_)) + sizeof(frame_count_));
  // @@protoc_insertion_point(copy_constructor:mamecast_protocol.FrameAllocate)
}

void FrameAllocate::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_count_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frame_count_));
}

FrameAllocate::~FrameAllocate() {
  // @@protoc_insertion_point(destructor:mamecast_protocol.FrameAllocate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameAllocate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameAllocate::ArenaDtor(void* object) {
  FrameAllocate* _this = reinterpret_cast< FrameAllocate* >(object);
  (void)_this;
}
void FrameAllocate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameAllocate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameAllocate& FrameAllocate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameAllocate_mamecast_2eproto.base);
  return *internal_default_instance();
}


void FrameAllocate::Clear() {
// @@protoc_insertion_point(message_clear_start:mamecast_protocol.FrameAllocate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_count_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frame_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameAllocate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frame_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameAllocate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mamecast_protocol.FrameAllocate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 frame_count = 3;
  if (this->frame_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_frame_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mamecast_protocol.FrameAllocate)
  return target;
}

size_t FrameAllocate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mamecast_protocol.FrameAllocate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 frame_count = 3;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameAllocate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mamecast_protocol.FrameAllocate)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameAllocate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameAllocate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mamecast_protocol.FrameAllocate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mamecast_protocol.FrameAllocate)
    MergeFrom(*source);
  }
}

void FrameAllocate::MergeFrom(const FrameAllocate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mamecast_protocol.FrameAllocate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.frame_count() != 0) {
    _internal_set_frame_count(from._internal_frame_count());
  }
}

void FrameAllocate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mamecast_protocol.FrameAllocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameAllocate::CopyFrom(const FrameAllocate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mamecast_protocol.FrameAllocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAllocate::IsInitialized() const {
  return true;
}

void FrameAllocate::InternalSwap(FrameAllocate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameAllocate, frame_count_)
      + sizeof(FrameAllocate::frame_count_)
      - PROTOBUF_FIELD_OFFSET(FrameAllocate, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameAllocate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameFree::InitAsDefaultInstance() {
}
class FrameFree::_Internal {
 public:
};

FrameFree::FrameFree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mamecast_protocol.FrameFree)
}
FrameFree::FrameFree(const FrameFree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:mamecast_protocol.FrameFree)
}

void FrameFree::SharedCtor() {
  frame_id_ = 0;
}

FrameFree::~FrameFree() {
  // @@protoc_insertion_point(destructor:mamecast_protocol.FrameFree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameFree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameFree::ArenaDtor(void* object) {
  FrameFree* _this = reinterpret_cast< FrameFree* >(object);
  (void)_this;
}
void FrameFree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameFree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameFree& FrameFree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameFree_mamecast_2eproto.base);
  return *internal_default_instance();
}


void FrameFree::Clear() {
// @@protoc_insertion_point(message_clear_start:mamecast_protocol.FrameFree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameFree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameFree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mamecast_protocol.FrameFree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mamecast_protocol.FrameFree)
  return target;
}

size_t FrameFree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mamecast_protocol.FrameFree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameFree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mamecast_protocol.FrameFree)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameFree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameFree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mamecast_protocol.FrameFree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mamecast_protocol.FrameFree)
    MergeFrom(*source);
  }
}

void FrameFree::MergeFrom(const FrameFree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mamecast_protocol.FrameFree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void FrameFree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mamecast_protocol.FrameFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameFree::CopyFrom(const FrameFree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mamecast_protocol.FrameFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameFree::IsInitialized() const {
  return true;
}

void FrameFree::InternalSwap(FrameFree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameFree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameStateChange::InitAsDefaultInstance() {
}
class FrameStateChange::_Internal {
 public:
};

FrameStateChange::FrameStateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mamecast_protocol.FrameStateChange)
}
FrameStateChange::FrameStateChange(const FrameStateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shmem_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shmem_path().empty()) {
    shmem_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shmem_path(),
      GetArena());
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mamecast_protocol.FrameStateChange)
}

void FrameStateChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameStateChange_mamecast_2eproto.base);
  shmem_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(type_));
}

FrameStateChange::~FrameStateChange() {
  // @@protoc_insertion_point(destructor:mamecast_protocol.FrameStateChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameStateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shmem_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameStateChange::ArenaDtor(void* object) {
  FrameStateChange* _this = reinterpret_cast< FrameStateChange* >(object);
  (void)_this;
}
void FrameStateChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameStateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameStateChange& FrameStateChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameStateChange_mamecast_2eproto.base);
  return *internal_default_instance();
}


void FrameStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mamecast_protocol.FrameStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shmem_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameStateChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mamecast_protocol.FrameStateChange.FrameStateType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mamecast_protocol::FrameStateChange_FrameStateType>(val));
        } else goto handle_unusual;
        continue;
      // string shmem_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_shmem_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mamecast_protocol.FrameStateChange.shmem_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameStateChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mamecast_protocol.FrameStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // .mamecast_protocol.FrameStateChange.FrameStateType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string shmem_path = 5;
  if (this->shmem_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shmem_path().data(), static_cast<int>(this->_internal_shmem_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mamecast_protocol.FrameStateChange.shmem_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_shmem_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mamecast_protocol.FrameStateChange)
  return target;
}

size_t FrameStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mamecast_protocol.FrameStateChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shmem_path = 5;
  if (this->shmem_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shmem_path());
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // .mamecast_protocol.FrameStateChange.FrameStateType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameStateChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mamecast_protocol.FrameStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameStateChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameStateChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mamecast_protocol.FrameStateChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mamecast_protocol.FrameStateChange)
    MergeFrom(*source);
  }
}

void FrameStateChange::MergeFrom(const FrameStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mamecast_protocol.FrameStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shmem_path().size() > 0) {
    _internal_set_shmem_path(from._internal_shmem_path());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void FrameStateChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mamecast_protocol.FrameStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameStateChange::CopyFrom(const FrameStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mamecast_protocol.FrameStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameStateChange::IsInitialized() const {
  return true;
}

void FrameStateChange::InternalSwap(FrameStateChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shmem_path_.Swap(&other->shmem_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameStateChange, type_)
      + sizeof(FrameStateChange::type_)
      - PROTOBUF_FIELD_OFFSET(FrameStateChange, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameStateChange::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mamecast_protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mamecast_protocol::FrameAllocate* Arena::CreateMaybeMessage< ::mamecast_protocol::FrameAllocate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mamecast_protocol::FrameAllocate >(arena);
}
template<> PROTOBUF_NOINLINE ::mamecast_protocol::FrameFree* Arena::CreateMaybeMessage< ::mamecast_protocol::FrameFree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mamecast_protocol::FrameFree >(arena);
}
template<> PROTOBUF_NOINLINE ::mamecast_protocol::FrameStateChange* Arena::CreateMaybeMessage< ::mamecast_protocol::FrameStateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mamecast_protocol::FrameStateChange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
